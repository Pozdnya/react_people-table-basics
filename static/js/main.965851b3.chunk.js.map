{"version":3,"sources":["components/NavBar/NavBar.tsx","components/Loader/Loader.tsx","api.ts","components/PersonLink/PersonLink.tsx","components/Pages/PersonsPage.tsx","components/Pages/HomePage.tsx","components/Pages/PageNotFound.tsx","App.tsx","index.tsx"],"names":["NavBar","className","role","to","isActive","cn","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","person","slug","name","sex","PersonsPage","useState","persons","setPersons","errorMessage","setErrorMessage","isLoading","setIsLoading","useParams","isSelected","useEffect","fetchData","peopleFromServer","getParent","parentName","find","peopleWithParents","map","mother","motherName","father","fatherName","length","born","died","HomePage","PageNotFound","App","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.965851b3.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const NavBar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={({ isActive }) => cn(\n              'navbar-item',\n              { 'has-background-grey-lighter': isActive },\n            )}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to=\"people\"\n            className={({ isActive }) => cn(\n              'navbar-item',\n              { 'has-background-grey-lighter': isActive },\n            )}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { FC } from 'react';\nimport cn from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ninterface Props {\n  person: Person;\n}\n\nexport const PersonLink: FC<Props> = ({ person }) => {\n  const { slug, name, sex } = person;\n\n  return (\n    <Link\n      to={`/people/${slug}`}\n      className={cn({ 'has-text-danger': sex === 'f' })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { Loader } from '../Loader';\nimport { getPeople } from '../../api';\nimport { PersonLink } from '../PersonLink';\n\nexport const PersonsPage = () => {\n  const [persons, setPersons] = useState<Person[]>([]);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const { slug } = useParams();\n  const isSelected = (person: Person) => slug === person.slug;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      try {\n        const peopleFromServer = await getPeople();\n\n        const getParent = (parentName: string) => peopleFromServer.find(\n          ({ name }) => name === parentName,\n        );\n\n        const peopleWithParents = peopleFromServer.map((person) => {\n          return {\n            ...person,\n            mother: getParent(person.motherName || ''),\n            father: getParent(person.fatherName || ''),\n          };\n        });\n\n        setPersons(peopleWithParents);\n      } catch {\n        setErrorMessage('Something went wrong');\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {!persons.length && !errorMessage\n            ? ((isLoading && <Loader />) || (\n              <p data-cy=\"noPeopleMessage\">\n                There are no people on the server\n              </p>\n            ))\n            : (\n              <>\n                {\n                  errorMessage\n                    ? (\n                      <p\n                        data-cy=\"peopleLoadingError\"\n                        className=\"has-text-danger\"\n                      >\n                        Something went wrong\n                      </p>\n                    )\n                    : (\n                      <table\n                        data-cy=\"peopleTable\"\n                        className=\"\n                      table is-striped is-hoverable is-narrow is-fullwidth\n                      \"\n                      >\n                        <thead>\n                          <tr>\n                            <th>Name</th>\n                            <th>Sex</th>\n                            <th>Born</th>\n                            <th>Died</th>\n                            <th>Mother</th>\n                            <th>Father</th>\n                          </tr>\n                        </thead>\n\n                        <tbody>\n                          {persons.map((person) => {\n                            const {\n                              sex,\n                              born,\n                              died,\n                              motherName,\n                              fatherName,\n                              father,\n                              mother,\n                            } = person;\n\n                            return (\n                              <tr\n                                data-cy=\"person\"\n                                key={person.slug}\n                                className={cn({\n                                  'has-background-warning':\n                                    isSelected(person),\n                                })}\n                              >\n                                <td>\n                                  <PersonLink person={person} />\n                                </td>\n\n                                <td>{sex}</td>\n                                <td>{born}</td>\n                                <td>{died}</td>\n                                <td>\n                                  {mother ? (\n                                    <PersonLink person={mother} />\n                                  ) : motherName || '-'}\n                                </td>\n                                <td>\n                                  {father ? (\n                                    <PersonLink person={father} />\n                                  ) : fatherName || '-'}\n                                </td>\n                              </tr>\n                            );\n                          })}\n\n                        </tbody>\n                      </table>\n                    )\n                }\n\n              </>\n            )}\n\n        </div>\n      </div>\n\n    </>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export const PageNotFound = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { NavBar } from './components/NavBar';\nimport { PersonsPage } from './components/Pages/PersonsPage';\nimport { HomePage } from './components/Pages/HomePage';\nimport { PageNotFound } from './components/Pages/PageNotFound';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <NavBar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"people\" element={<PersonsPage />}>\n              <Route index element={<PersonsPage />} />\n              <Route path=\":slug\" element={<PersonsPage />} />\n            </Route>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"*\" element={<PageNotFound />} />\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <HashRouter>\n      <App />\n    </HashRouter>,\n  );\n"],"sourceRoot":""}